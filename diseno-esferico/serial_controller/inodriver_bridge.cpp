//// ****** THIS FILE IS AUTOGENERATED ******
////
////          >>>> DO NOT CHANGE <<<<
////
/// 
///  Filename; /Users/grecco/Documents/code/spim/spim/drivers/arduino.py
///  Source class: MultiController
///  Generation timestamp: 2019-05-23T23:42:14.867609
///  Class code hash: d1b05b40a9df1b4a1656d0c3765fd920b632719c
///
/////////////////////////////////////////////////////////////


#include "inodriver_bridge.h"

SerialCommand sCmd;

void ok() {
  Serial.println("OK");
}

void error(const char* msg) {
  Serial.print("ERROR: ");
  Serial.println(msg);
}

void error_i(int errno) {
  Serial.print("ERROR: ");
  Serial.println(errno);
}

void bridge_loop() {
  while (Serial.available() > 0) {
    sCmd.readSerial();
  }
}

void bridge_setup() {
  //// Setup callbacks for SerialCommand commands

  // All commands might return
  //    ERROR: <error message>

  // All set commands return 
  //    OK 
  // if the operation is successfull

  // All parameters are ascii encoded strings
  sCmd.addCommand("INFO?", getInfo); 

  sCmd.setDefaultHandler(unrecognized); 


  // initialize

  // Call:
  //   INITIALIZE
  // Returns: OK or ERROR  
  sCmd.addCommand("INITIALIZE", wrapperCall_INITIALIZE); 

  // finalize

  // Call:
  //   FINALIZE
  // Returns: OK or ERROR  
  sCmd.addCommand("FINALIZE", wrapperCall_FINALIZE); 

  // power
  // <I> int as string 
  // <I> int as string 

  // Getter:
  //   POW? <I>
  // Returns: <I> 
  sCmd.addCommand("POW?", wrapperGet_POW); 

  // Setter:
  //   POW <I> <I>
  // Returns: OK or ERROR    
  sCmd.addCommand("POW", wrapperSet_POW); 

  // setpoint
  // <F> float as string 

  // Getter:
  //   SETPOINT? 
  // Returns: <F> 
  sCmd.addCommand("SETPOINT?", wrapperGet_SETPOINT); 

  // Setter:
  //   SETPOINT <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("SETPOINT", wrapperSet_SETPOINT); 

  // theta
  // <F> float as string 

  // Getter:
  //   THETA? 
  // Returns: <F> 
  sCmd.addCommand("THETA?", wrapperGet_THETA); 

  // Setter:
  //   THETA <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("THETA", wrapperSet_THETA); 

  // temperature_enabled
  // <B> bool as string: True as "1", False as "0" 

  // Getter:
  //   TEMPCTRL? 
  // Returns: <B> 
  sCmd.addCommand("TEMPCTRL?", wrapperGet_TEMPCTRL); 

  // Setter:
  //   TEMPCTRL <B> 
  // Returns: OK or ERROR    
  sCmd.addCommand("TEMPCTRL", wrapperSet_TEMPCTRL); 

  // filter_position
  // <I> int as string 
  // <I> int as string 

  // Getter:
  //   FW? <I>
  // Returns: <I> 
  sCmd.addCommand("FW?", wrapperGet_FW); 

  // Setter:
  //   FW <I> <I>
  // Returns: OK or ERROR    
  sCmd.addCommand("FW", wrapperSet_FW); 

  // shutter_open
  // <B> bool as string: True as "1", False as "0" 
  // <I> int as string 

  // Getter:
  //   SHUT? <I>
  // Returns: <B> 
  sCmd.addCommand("SHUT?", wrapperGet_SHUT); 

  // Setter:
  //   SHUT <I> <B>
  // Returns: OK or ERROR    
  sCmd.addCommand("SHUT", wrapperSet_SHUT); 

  // temperature
  // <F> float as string 

  // Getter:
  //   TEMP? 
  // Returns: <F> 
  sCmd.addCommand("TEMP?", wrapperGet_TEMP); 
}

//// Code 

void getInfo() {
  Serial.print("MultiController,");
  Serial.println(COMPILE_DATE_TIME);
}

void unrecognized(const char *command) {
  error("Unknown command");
}
//// Auto generated Feat and DictFeat Code
// COMMAND: INITIALIZE, Action: initialize

void wrapperCall_INITIALIZE() {
  int err = call_INITIALIZE();
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};

// COMMAND: FINALIZE, Action: finalize

void wrapperCall_FINALIZE() {
  int err = call_FINALIZE();
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};

// COMMAND: POW, FEAT: power

void wrapperGet_POW() { 
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int key = atoi(arg);


  Serial.println(get_POW(key)); 
}; 


void wrapperSet_POW() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int key = atoi(arg);

  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int value = atoi(arg);

  
  int err = set_POW(key, value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: SETPOINT, FEAT: setpoint

void wrapperGet_SETPOINT() { 
  Serial.println(get_SETPOINT()); 
}; 


void wrapperSet_SETPOINT() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_SETPOINT(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: THETA, FEAT: theta

void wrapperGet_THETA() { 
  Serial.println(get_THETA()); 
}; 


void wrapperSet_THETA() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_THETA(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: TEMPCTRL, FEAT: temperature_enabled

void wrapperGet_TEMPCTRL() { 
  Serial.println(get_TEMPCTRL()); 
}; 


void wrapperSet_TEMPCTRL() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int value = atoi(arg);

  int err = set_TEMPCTRL(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: FW, FEAT: filter_position

void wrapperGet_FW() { 
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int key = atoi(arg);


  Serial.println(get_FW(key)); 
}; 


void wrapperSet_FW() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int key = atoi(arg);

  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int value = atoi(arg);

  
  int err = set_FW(key, value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: SHUT, FEAT: shutter_open

void wrapperGet_SHUT() { 
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int key = atoi(arg);


  Serial.println(get_SHUT(key)); 
}; 


void wrapperSet_SHUT() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int key = atoi(arg);

  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int value = atoi(arg);

  
  int err = set_SHUT(key, value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: TEMP, FEAT: temperature

void wrapperGet_TEMP() { 
  Serial.println(get_TEMP()); 
}; 



